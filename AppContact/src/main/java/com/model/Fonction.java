package com.model;

// Generated 9 oct. 2016 13:55:49 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Fonction generated by hbm2java
 */
@Entity
@Table(name = "fonction", catalog = "appcontact")
public class Fonction implements java.io.Serializable {

	private Integer idFonction;
	private String libelleFonction;
	private Set<Physique> physiques = new HashSet<Physique>(0);
	private Set<Membre> membres = new HashSet<Membre>(0);

	public Fonction() {
	}

	public Fonction(String libelleFonction, Set<Physique> physiques,
			Set<Membre> membres) {
		this.libelleFonction = libelleFonction;
		this.physiques = physiques;
		this.membres = membres;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "idFonction", unique = true, nullable = false)
	public Integer getIdFonction() {
		return this.idFonction;
	}

	public void setIdFonction(Integer idFonction) {
		this.idFonction = idFonction;
	}

	@Column(name = "libelleFonction", length = 254)
	public String getLibelleFonction() {
		return this.libelleFonction;
	}

	public void setLibelleFonction(String libelleFonction) {
		this.libelleFonction = libelleFonction;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "fonction")
	public Set<Physique> getPhysiques() {
		return this.physiques;
	}

	public void setPhysiques(Set<Physique> physiques) {
		this.physiques = physiques;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "fonction")
	public Set<Membre> getMembres() {
		return this.membres;
	}

	public void setMembres(Set<Membre> membres) {
		this.membres = membres;
	}
	
	  @Override
	    public boolean equals(Object other) {
	        return (other instanceof Fonction) && (idFonction!= null)
	            ? idFonction.equals(((Fonction) other).idFonction)
	            : (other == this);
	    }

	    @Override
	    public int hashCode() {
	        return (idFonction != null)
	            ? (this.getClass().hashCode() + idFonction.hashCode())
	            : super.hashCode();
	    }

	    @Override
	    public String toString() {
	        return String.format("Fonction[%d, %s]", idFonction,libelleFonction);
	    }
	
	

}
