package com.model;

// Generated 31 août 2016 17:16:44 by Hibernate Tools 3.4.0.CR1

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Contact generated by hbm2java
 */
@Entity
@Table(name = "contact", catalog = "appcontactmybuild")
public class Contact implements java.io.Serializable {

	private Integer idContact;
	private Region region;
	private Groupecontact groupecontact;
	private Secteur secteur;
	private String adresse;
	private String ville;
	private String codePostal;
	private String pays;
	private Integer telephonne;
	private Integer mobile;
	private String email;
	private String typeContact;
	private String nom;
	private Morale morale;
	private Physique physique;
	private byte[] photo;
	private Date date;

	public Contact() {
	}

	public Contact(Region region, Groupecontact groupecontact, Secteur secteur,
			String adresse, String ville, String codePostal, String pays,
			Integer telephonne, Integer mobile, String email,
			String typeContact, String nom, Morale morale, Physique physique,byte[] photo, Date date) {
		this.region = region;
		this.groupecontact = groupecontact;
		this.secteur = secteur;
		this.adresse = adresse;
		this.ville = ville;
		this.codePostal = codePostal;
		this.pays = pays;
		this.telephonne = telephonne;
		this.mobile = mobile;
		this.email = email;
		this.typeContact = typeContact;
		this.nom = nom;
		this.morale = morale;
		this.physique = physique;
		this.photo = photo;
		this.date = date;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "idContact", unique = true, nullable = false)
	public Integer getIdContact() {
		return this.idContact;
	}

	public void setIdContact(Integer idContact) {
		this.idContact = idContact;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "idRegion",nullable = false)
	public Region getRegion() {
		return this.region;
	}

	public void setRegion(Region region) {
		this.region = region;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "idGroupe",nullable = true)
	public Groupecontact getGroupecontact() {
		return this.groupecontact;
	}

	public void setGroupecontact(Groupecontact groupecontact) {
		this.groupecontact = groupecontact;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "idSecteur",nullable = false)
	public Secteur getSecteur() {
		return this.secteur;
	}

	public void setSecteur(Secteur secteur) {
		this.secteur = secteur;
	}

	@Column(name = "adresse", length = 254)
	public String getAdresse() {
		return this.adresse;
	}

	public void setAdresse(String adresse) {
		this.adresse = adresse;
	}

	@Column(name = "ville", length = 254)
	public String getVille() {
		return this.ville;
	}

	public void setVille(String ville) {
		this.ville = ville;
	}

	@Column(name = "codePostal", length = 254)
	public String getCodePostal() {
		return this.codePostal;
	}

	public void setCodePostal(String codePostal) {
		this.codePostal = codePostal;
	}

	@Column(name = "pays", length = 254)
	public String getPays() {
		return this.pays;
	}

	public void setPays(String pays) {
		this.pays = pays;
	}

	@Column(name = "telephonne")
	public Integer getTelephonne() {
		return this.telephonne;
	}

	public void setTelephonne(Integer telephonne) {
		this.telephonne = telephonne;
	}

	@Column(name = "mobile")
	public Integer getMobile() {
		return this.mobile;
	}

	public void setMobile(Integer mobile) {
		this.mobile = mobile;
	}

	@Column(name = "email", length = 254)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

//	@Override
//    public String toString() {
//        return email;
//    }
//	
	@Column(name = "typeContact", length = 254)
	public String getTypeContact() {
		return this.typeContact;
	}
	
	

	public void setTypeContact(String typeContact) {
		this.typeContact = typeContact;
	}

	@Column(name = "nom", length = 254)
	public String getNom() {
		return this.nom;
	}

	public void setNom(String nom) {
		this.nom = nom;
	}
	

	@Column(name = "photo")
	public byte[] getPhoto() {
		return this.photo;
	}

	public void setPhoto(byte[] photo) {
		this.photo = photo;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date", length = 10)
	public Date getDate() {
		return this.date;
	}

	public void setDate(Date date) {
		this.date = date;
	}
	
	

	@OneToOne(fetch = FetchType.EAGER, mappedBy = "contact")
	public Morale getMorale() {
		return this.morale;
	}
	
	
	
	
	

	public void setMorale(Morale morale) {
		this.morale = morale;
	}

	@OneToOne(fetch = FetchType.EAGER, mappedBy = "contact")
	public Physique getPhysique() {
		return this.physique;
	}

	public void setPhysique(Physique physique) {
		this.physique = physique;
	}
	
	
//    @Override
//    public boolean equals(Object other) {
//        return (other instanceof Contact) && (idContact != null)
//            ? idContact.equals(((Contact) other).idContact)
//            : (other == this);
//    }
//
//    @Override
//    public int hashCode() {
//        return (idContact != null)
//            ? (this.getClass().hashCode() + idContact.hashCode())
//            : super.hashCode();
//    }
//
//    @Override
//    public String toString() {
//        return String.format("Contact[%d, %s]", idContact, email);
//    }
	

}
